using System.Reflection.Emit;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;

namespace AgroApp_Desktop
{



    public partial class AgroApp : Form
    {

        public AgroApp()
        {

            InitializeComponent();

            // Quais elementos devem aparecer ao iniciar o programa
            panelMenu.Visible = true;
            pictureLogoInicio.Visible = true;
            panelFaixa1.Visible = false;
            panelFaixa2.Visible = false;
            panelFaixa3.Visible = false;
            panelFaixa.Visible = false;
            panelAreaVendas.Visible = false;
            panelProdução.Visible = false;
            dataGridVendas.Visible = false;
            dataGridProdução.Visible = false;
            dataGridFornecedores.Visible = false;
            panelFornecedores.Visible = false;
            panelRelatórios.Visible = false;

            // Tirando a estilização padrão dos links
            linkVendas.LinkBehavior = LinkBehavior.NeverUnderline;
            linkProduçao.LinkBehavior = LinkBehavior.NeverUnderline;
            linkFornecedor.LinkBehavior = LinkBehavior.NeverUnderline;
            linkRelatorio.LinkBehavior = LinkBehavior.NeverUnderline;
        }


        private async void Form1_Load(object sender, EventArgs e)
        {
            //Paleta de cores dos elementos no menu
            panelMenu.BackColor = ColorPalette.VerdeClaro; 
            panelFaixa1.BackColor = ColorPalette.VerdeMedio;
            panelFaixa2.BackColor = ColorPalette.VerdeMedio;
            panelFaixa3.BackColor = ColorPalette.VerdeMedio;
            panelFaixa.BackColor = ColorPalette.VerdeMedio;
            linkVendas.LinkColor = ColorPalette.VerdeEscuro;
            labelVendas.ForeColor = ColorPalette.VerdeEscuro;
            linkProduçao.LinkColor = ColorPalette.VerdeEscuro;
            labelProdução.ForeColor = ColorPalette.VerdeEscuro;
            buttonAdicionarProdução.BackColor = ColorPalette.VerdeClaro;
            buttonAdicionarProdução.ForeColor = ColorPalette.VerdeEscuro;
            linkFornecedor.LinkColor = ColorPalette.VerdeEscuro;
            labelFornecedores.ForeColor = ColorPalette.VerdeEscuro;
            linkRelatorio.LinkColor = ColorPalette.VerdeEscuro;
            panelVendaIngresso.BackColor = ColorPalette.VerdeClaro;
            panelVendaAlimento.BackColor = ColorPalette.VerdeClaro;
            panelGanhoTotal.BackColor = ColorPalette.VerdeClaro;
            labelAlimentoFornecido.ForeColor = ColorPalette.VerdeEscuro;
            labelAlimentoIngresso.ForeColor = ColorPalette.VerdeEscuro;
            labelVendaIngresso.ForeColor = ColorPalette.VerdeEscuro;
            labelVendaAlimento.ForeColor = ColorPalette.VerdeEscuro;
            labelGanhoTotal.ForeColor = ColorPalette.VerdeEscuro;
            labelRelatórios.ForeColor = ColorPalette.VerdeEscuro;
            pictureAgroApp.BackColor = ColorPalette.VerdeClaro;


            Relatorio relatorio = null;

            try
            {
                // Chama o método para obter os dados da API
                ConexaoBackEnd conexao = new ConexaoBackEnd();
                relatorio = await conexao.deveRetornarRelatorio();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao carregar dados: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            label2.Text = relatorio.total_ingressos;
            label4.Text = relatorio.total_venda_alimentos;
            label5.Text = $"R$ {relatorio.ganho_total}";

            // Configurando o primeiro gráfico
            chartAlimentosFornecidos.Series.Clear(); // Limpa as séries existentes
            var series1 = chartAlimentosFornecidos.Series.Add("Série 1");
            series1.ChartType = SeriesChartType.Doughnut; // Tipo de gráfico

            // Itera sobre os dados do dicionário e adiciona ao gráfico
            int index = 0;
            foreach (var alimento in relatorio.map_top_cinco_alimentos_fornecidos)
            {
                var point = series1.Points.AddXY(alimento.Key, alimento.Value); // Adiciona o ponto no gráfico
                series1.Points[index].Label = $"{alimento.Key}: {alimento.Value:F1}%"; // Define o rótulo
                series1.Points[index].LabelForeColor = System.Drawing.Color.Black; // Define a cor do rótulo

                // Opcional: Ajustar cores manualmente com base no índice (exemplo de tons de verde)
                switch (index)
                {
                    case 0: series1.Points[index].Color = ColorPalette.Verde; break;
                    case 1: series1.Points[index].Color = ColorPalette.VerdeClaro; break;
                    case 2: series1.Points[index].Color = ColorPalette.VerdeMedio; break;
                    case 3: series1.Points[index].Color = ColorPalette.VerdeEscuro; break;
                    default: series1.Points[index].Color = System.Drawing.Color.Gray; break; // Cor padrão para extras
                }

                index++;
            }

            // Configurando o segundo gráfico
            chartAlimentosIngresso.Series.Clear(); // Limpa as séries existentes
            var series2 = chartAlimentosIngresso.Series.Add("Série 2");
            series2.ChartType = SeriesChartType.Column; // Tipo de gráfico (Coluna)

            // Define as propriedades do gráfico para espaçamento correto entre as colunas
            series2["PointWidth"] = "0.8"; // Ajusta a largura das colunas
            series2["BarWidth"] = "0.8";   // Ajuste adicional de largura se necessário

            // Itera sobre os dados do dicionário e adiciona ao gráfico
            int index2 = 0;
            foreach (var alimento in relatorio.map_top_cinco_alimentos_ingresso)
            {
                // Adiciona o ponto no gráfico com valor único de X (index2) e o valor Y (alimento.Value)
                var point = series2.Points.AddXY(index2, alimento.Value); // X é o índice, Y é o valor

                // Define o rótulo com o valor e a porcentagem
                series2.Points[index2].Label = $"{alimento.Key}: {alimento.Value:F1}%"; // Exibe o valor com 1 casa decimal
                series2.Points[index2].LabelForeColor = System.Drawing.Color.Black; // Define a cor do rótulo

                // Ajusta a cor das barras manualmente com base no índice
                switch (index2)
                {
                    case 0: series2.Points[index2].Color = ColorPalette.VerdeMedio; break;
                    case 1: series2.Points[index2].Color = ColorPalette.VerdeMedio; break;
                    case 2: series2.Points[index2].Color = ColorPalette.VerdeMedio; break;
                    case 3: series2.Points[index2].Color = ColorPalette.VerdeMedio; break;
                    default: series2.Points[index2].Color = ColorPalette.VerdeMedio; break; // Cor padrão 
                }

                index2++;
            }


            series1.IsValueShownAsLabel = true; // Exibir os dados
            series1.Font = new Font("Linik Sans", 10, FontStyle.Bold); // Para alterar a fonte dos dados

            series2.IsValueShownAsLabel = true; // Exibir os dados
            series2.Font = new Font("Linik Sans", 10, FontStyle.Bold); // Para alterar a fonte dos dados

            ConfigurarDataGridVendasAsync();
            ConfigurarDataGridProduçãoAsync();
            ConfigurarDataGridFornecedores();
        }


        private async Task ConfigurarDataGridVendasAsync()
        {
            dataGridVendas.AllowUserToAddRows = false;

            // Limpa colunas e linhas existentes, se houver
            dataGridVendas.Columns.Clear();
            dataGridVendas.Rows.Clear();

            // Adicionando as colunas 
            dataGridVendas.Columns.Add("Coluna1", "Vendas realizadas");
            dataGridVendas.Columns.Add("Coluna2", "Quantidade");
            dataGridVendas.Columns.Add("Coluna3", "Valor total");

            dataGridVendas.DefaultCellStyle.ForeColor = ColorPalette.VerdeEscuro; // Cor do texto
            dataGridVendas.ColumnHeadersDefaultCellStyle.ForeColor = ColorPalette.VerdeEscuro; // Cor do texto do cabeçalho

            // Centraliza o texto dos cabeçalhos
            foreach (DataGridViewColumn column in dataGridVendas.Columns)
            {
                column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            dataGridVendas.Columns[0].HeaderCell.Style.BackColor = ColorPalette.VerdeClaro;// Cor para a primeira coluna
            dataGridVendas.Columns[1].HeaderCell.Style.BackColor = ColorPalette.VerdeClaro;// Cor para a segunda coluna 
            dataGridVendas.Columns[2].HeaderCell.Style.BackColor = ColorPalette.VerdeClaro;// Cor para a terceira coluna

            try
            {
                // Chama o método para obter os dados da API
                ConexaoBackEnd conexao = new ConexaoBackEnd();
                List<VendasEfetivadas> vendas = await conexao.deveRetornarVendasEfetivadas();

                // Adiciona os dados ao DataGridView
                foreach (var venda in vendas)
                {
                    dataGridVendas.Rows.Add(venda.nome_alimento, venda.quantidade_vendida, venda.total_vendido);
                }
                dataGridVendas.Height = 242; //Altura do datagrid
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao carregar dados: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            dataGridVendas.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;


        }

        private async Task ConfigurarDataGridProduçãoAsync()
        {
            dataGridProdução.AllowUserToAddRows = false;

            // Limpa as colunas antes de adicionar novas
            dataGridProdução.Columns.Clear();

            // Adicionando as colunas
            dataGridProdução.Columns.Add("Coluna1", "Quantidade");
            dataGridProdução.Columns.Add("Coluna2", "Nome");
            dataGridProdução.Columns.Add("Coluna3", "Data do cadastro");
            dataGridProdução.Columns.Add("Coluna4", "Clima e região");
            dataGridProdução.Columns.Add("Coluna5", "Tempo para ser feito");
            dataGridProdução.Columns.Add("Coluna6", "Valor final");

            DataGridViewCheckBoxColumn checkBoxColumn = new DataGridViewCheckBoxColumn();
            checkBoxColumn.HeaderText = "PRONTO";  // Cabeçalho da coluna
            checkBoxColumn.Name = "ColunaCheckBox";     // Nome da coluna
            checkBoxColumn.Width = 50;                   // Largura da coluna
            checkBoxColumn.ReadOnly = false;             // Permitir edição
            dataGridProdução.Columns.Add(checkBoxColumn); // Adiciona a coluna CheckBox

            dataGridProdução.DefaultCellStyle.ForeColor = ColorPalette.VerdeEscuro; // Cor do texto
            dataGridProdução.ColumnHeadersDefaultCellStyle.ForeColor = ColorPalette.VerdeEscuro; // Cor do texto do cabeçalho
            dataGridProdução.Columns["Coluna6"].ReadOnly = false; // Permitir edição pelo usuário

            // Centraliza o texto dos cabeçalhos
            foreach (DataGridViewColumn column in dataGridProdução.Columns)
            {
                column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            dataGridProdução.Columns[0].HeaderCell.Style.BackColor = ColorPalette.VerdeClaro; // Cor para a primeira coluna
            dataGridProdução.Columns[1].HeaderCell.Style.BackColor = ColorPalette.VerdeClaro; // Cor para a segunda coluna
            dataGridProdução.Columns[2].HeaderCell.Style.BackColor = ColorPalette.VerdeClaro; // Cor para a terceira coluna
            dataGridProdução.Columns[3].HeaderCell.Style.BackColor = ColorPalette.VerdeClaro; // Cor para a quarta coluna
            dataGridProdução.Columns[4].HeaderCell.Style.BackColor = ColorPalette.VerdeClaro; // Cor para a quinta coluna
            dataGridProdução.Columns[5].HeaderCell.Style.BackColor = ColorPalette.VerdeClaro; // Cor para a sexta coluna

            // Limpa as linhas existentes no DataGridView antes de carregar os novos dados
            dataGridProdução.Rows.Clear();

            List<PlantacoesCadastradas> plantacoes = null;
            try
            {
                // Chama o método para obter os dados da API
                ConexaoBackEnd conexao = new ConexaoBackEnd();
                plantacoes = await conexao.deveRetornarPlantacoesCadastradas();

                // Adiciona os dados ao DataGridView
                foreach (var plantacao in plantacoes)
                {
                    string dataFormatada = DateTime.Parse(plantacao.data_cadastro).ToString("dd/MM/yyyy HH:mm:ss");
                    dataGridProdução.Rows.Add(
                        $"{plantacao.quantidade}X",  // Coluna 1
                        plantacao.alimento_cadastrado, // Coluna 2
                        dataFormatada,  // Coluna 3
                        $"{plantacao.clima}/{plantacao.regiao}",  // Coluna 4
                        plantacao.tempo_finalizacao // Coluna 5
                    );
                }
                dataGridProdução.Height = 243; // Altura do DataGridView
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao carregar dados: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            dataGridProdução.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;

            buttonAdicionarProdução.Click += async (sender, e) => await DefinirAlimentoComoPronto(plantacoes);
        }

        private async Task DefinirAlimentoComoPronto(List<PlantacoesCadastradas> plantacoesCadastradas)
        {
            try
            {
                // Verifica se existem alimentos no DataGridView
                if (dataGridProdução.Rows.Count == 0)
                {
                    MessageBox.Show("Não há alimentos para processar.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                // Iterar pelas linhas do DataGridView para identificar os alimentos selecionados
                foreach (DataGridViewRow row in dataGridProdução.Rows)
                {
                    // Verificar se a célula da coluna de checkbox está marcada
                    var cellValue = row.Cells["ColunaCheckBox"].Value;
                    if (cellValue != null && (bool)cellValue)
                    {
                        // Obter o nome do alimento selecionado
                        string nomeAlimento = row.Cells["Coluna2"].Value?.ToString();
                        string valorFinalString = row.Cells["Coluna6"].Value?.ToString();

                        // Validar os dados necessários
                        if (string.IsNullOrWhiteSpace(nomeAlimento) || string.IsNullOrWhiteSpace(valorFinalString))
                        {
                            MessageBox.Show("Dados inválidos para um ou mais alimentos selecionados.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            continue;
                        }

                        // Converter o valor final para número
                        if (!double.TryParse(valorFinalString, out double valorFinal))
                        {
                            MessageBox.Show($"Valor inválido para o alimento {nomeAlimento}.", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            continue;
                        }

                        // Localizar o alimento correspondente na lista de plantações cadastradas
                        var plantacaoSelecionada = plantacoesCadastradas.FirstOrDefault(p => p.alimento_cadastrado == nomeAlimento);

                        if (plantacaoSelecionada == null)
                        {
                            MessageBox.Show($"O alimento {nomeAlimento} não foi encontrado na lista de plantações cadastradas.", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            continue;
                        }

                        // Pegar apenas o primeiro ID da lista `ids`
                        string idSelecionado = plantacaoSelecionada.ids.FirstOrDefault();

                        if (string.IsNullOrEmpty(idSelecionado))
                        {
                            MessageBox.Show($"O alimento {nomeAlimento} não possui um ID válido.", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            continue;
                        }

                        // Enviar para o backend utilizando o ID e valor final
                        ConexaoBackEnd conexao = new ConexaoBackEnd();
                        bool sucesso = await conexao.deveDefinirAlimentoComoPronto(long.Parse(idSelecionado), valorFinal);

                        // Notificar o usuário do sucesso ou falha
                        if (sucesso)
                        {
                            MessageBox.Show($"Alimento {nomeAlimento} marcado como 'PRONTO' com sucesso!", "Sucesso", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        else
                        {
                            MessageBox.Show($"Falha ao marcar o alimento {nomeAlimento} (ID: {idSelecionado}) como 'PRONTO'.", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }

                // Recarregar os dados do DataGridView
                await ConfigurarDataGridProduçãoAsync(); // Atualiza os dados da tabela
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao processar os alimentos: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }





        private async void ConfigurarDataGridFornecedores()
        {
            dataGridFornecedores.AllowUserToAddRows = false;

            // Adicionando as colunas 
            dataGridFornecedores.Columns.Add("Coluna1", "Fornecedores");
            dataGridFornecedores.Columns.Add("Coluna2", "Tipo pessoa");
            dataGridFornecedores.Columns.Add("Coluna3", "Telefone");

            dataGridFornecedores.DefaultCellStyle.ForeColor = ColorPalette.VerdeEscuro; // Cor do texto
            dataGridFornecedores.ColumnHeadersDefaultCellStyle.ForeColor = ColorPalette.VerdeEscuro; // Cor do texto do cabeçalho

            // Centraliza o texto dos cabeçalhos
            foreach (DataGridViewColumn column in dataGridFornecedores.Columns)
            {
                column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            dataGridFornecedores.Columns[0].HeaderCell.Style.BackColor = ColorPalette.VerdeClaro;  // Cor para a primeira coluna
            dataGridFornecedores.Columns[1].HeaderCell.Style.BackColor = ColorPalette.VerdeClaro;  // Cor para a primeira coluna
            dataGridFornecedores.Columns[2].HeaderCell.Style.BackColor = ColorPalette.VerdeClaro;  // Cor para a primeira coluna

            try
            {
                // Chama o método para obter os dados da API
                ConexaoBackEnd conexao = new ConexaoBackEnd();
                List<Fornecedores> fornecedores = await conexao.deveRetornarFornecedores();

                // Adiciona os dados ao DataGridView
                foreach (var forncedor in fornecedores)
                {
                    dataGridFornecedores.Rows.Add(forncedor.nome_fornecedor, forncedor.tipo_pessoa, forncedor.telefone);
                }
                dataGridVendas.Height = 242; //Altura do datagrid
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao carregar dados: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            dataGridFornecedores.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;


        }

        private void panelMenu_Paint(object sender, PaintEventArgs e)
        {

        }

        private void linkVendas_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            // Mostra a parte das vendas e oculta as demais
            panelAreaVendas.Visible = true;
            dataGridVendas.Visible = true;
            panelProdução.Visible = false;
            dataGridProdução.Visible = false;
            panelFornecedores.Visible = false;
            dataGridFornecedores.Visible = false;
            panelRelatórios.Visible = false;
            pictureLogoInicio.Visible = false;
        }

        private void linkFornecedor_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            // Mostra a parte dos fornecedores e oculta as demais
            panelFornecedores.Visible = true;
            dataGridFornecedores.Visible = true;
            panelProdução.Visible = false;
            dataGridProdução.Visible = false;
            panelAreaVendas.Visible = false;
            dataGridVendas.Visible = false;
            panelRelatórios.Visible = false;
            pictureLogoInicio.Visible = false;
        }

        private void linkProduçao_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            // Mostra a parte da produção e oculta as demais
            panelProdução.Visible = true;
            dataGridProdução.Visible = true;
            panelAreaVendas.Visible = false;
            dataGridVendas.Visible = false;
            panelFornecedores.Visible = false;
            dataGridFornecedores.Visible = false;
            panelRelatórios.Visible = false;
            pictureLogoInicio.Visible = false;
        }

        private void linkRelatorio_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            // Mostra a parte dos relatórios e oculta as demais
            panelRelatórios.Visible = true;
            chartAlimentosFornecidos.Visible = true;
            chartAlimentosIngresso.Visible = true;
            panelProdução.Visible = false;
            dataGridProdução.Visible = false;
            panelAreaVendas.Visible = false;
            dataGridVendas.Visible = false;
            panelFornecedores.Visible = false;
            dataGridFornecedores.Visible = false;
            pictureLogoInicio.Visible = false;
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {

            // Mostra a parte do menu inicial e oculta as demais
            panelMenu.Visible = true;
            panelRelatórios.Visible = false;
            chartAlimentosFornecidos.Visible = false;
            chartAlimentosIngresso.Visible = false;
            panelProdução.Visible = false;
            dataGridProdução.Visible = false;
            panelAreaVendas.Visible = false;
            dataGridVendas.Visible = false;
            panelFornecedores.Visible = false;
            dataGridFornecedores.Visible = false;
            pictureLogoInicio.Visible = true;
        }

        private void linkVendas_MouseEnter(object sender, EventArgs e)
        {
            // Faixa verde da parte de vendas ao passar o mouse 
            panelFaixa1.Visible = true; 
            linkVendas.BackColor = panelFaixa1.BackColor;
            pictureVendas.BackColor = panelFaixa1.BackColor;
        }

        private void linkVendas_MouseLeave(object sender, EventArgs e)
        {
            // Faixa verde da parte de vendas ao tirar o mouse
            panelFaixa1.Visible = false; 
            linkVendas.BackColor = panelMenu.BackColor;
            pictureVendas.BackColor = panelMenu.BackColor;
        }

        private void linkProduçao_MouseEnter(object sender, EventArgs e)
        {
            // Faixa verde da parte de produção ao passar o mouse 
            panelFaixa2.Visible = true; 
            linkProduçao.BackColor = panelFaixa2.BackColor;
            pictureProduçao.BackColor = panelFaixa2.BackColor;
        }

        private void linkProduçao_MouseLeave(object sender, EventArgs e)
        {
            // Faixa verde da parte de produção ao tirar o mouse
            panelFaixa2.Visible = false;
            linkProduçao.BackColor = panelMenu.BackColor;
            pictureProduçao.BackColor = panelMenu.BackColor;
        }

        private void linkFornecedor_MouseEnter(object sender, EventArgs e)
        {
            // Faixa verde da parte de fornecedores ao passar o mouse
            panelFaixa3.Visible = true; 
            linkFornecedor.BackColor = panelFaixa3.BackColor;
            pictureFornecedor.BackColor = panelFaixa3.BackColor;
        }

        private void linkFornecedor_MouseLeave(object sender, EventArgs e)
        {
            // Faixa verde da parte de fornecedores ao tirar o mouse
            panelFaixa3.Visible = false;
            linkFornecedor.BackColor = panelMenu.BackColor;
            pictureFornecedor.BackColor = panelMenu.BackColor;
        }

        private void linkRelatorio_MouseEnter(object sender, EventArgs e)
        {
            // Faixa verde da parte de relatórios ao passar o mouse
            panelFaixa.Visible = true; 
            linkRelatorio.BackColor = panelFaixa.BackColor;
            pictureRelatorio.BackColor = panelFaixa.BackColor;
        }

        private void linkRelatorio_MouseLeave(object sender, EventArgs e)
        {
            // Faixa verde da parte de relatórios ao tirar o mouse
            panelFaixa.Visible = false; 
            linkRelatorio.BackColor = panelMenu.BackColor;
            pictureRelatorio.BackColor = panelMenu.BackColor;
        }

        private void panelFaixa_Paint(object sender, PaintEventArgs e)
        {

        }

        private void panelFaixa_Paint_1(object sender, PaintEventArgs e)
        {

        }

        private void pictureBox3_Click(object sender, EventArgs e)
        {

        }

        private void pictureBox5_Click(object sender, EventArgs e)
        {

        }

        private void pictureBox6_Click(object sender, EventArgs e)
        {

        }

        private void panelAreaVendas_Paint(object sender, PaintEventArgs e)
        {

        }

        private void dataGridVendas_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataGridProdução_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void panelProdução_Paint(object sender, PaintEventArgs e)
        {

        }

        private void tableLayoutPanel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void dataGridProdução_CellContentClick_1(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void pictureBox2_Click(object sender, EventArgs e)
        {

        }

        private void pictureBox2_Click_1(object sender, EventArgs e)
        {

        }

        private void dataGridFornecedores_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void panel3_Paint(object sender, PaintEventArgs e)
        {

        }

        private void chart1_Click(object sender, EventArgs e)
        {

        }

        private void dataGridProdução_CellContentClick_2(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataGridFornecedores_CellContentClick_1(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void chart1_Click_1(object sender, EventArgs e)
        {

        }

        private void labelFormasPagamento_Click(object sender, EventArgs e)
        {

        }

        private void chart2_Click(object sender, EventArgs e)
        {

        }

        private void chart2_Click_1(object sender, EventArgs e)
        {

        }

        private void panel2_Paint(object sender, PaintEventArgs e)
        {

        }

        private void labelVendaIngresso_Click(object sender, EventArgs e)
        {

        }

        private void panelFornecedores_Paint(object sender, PaintEventArgs e)
        {

        }

        private void panelRelatórios_Paint(object sender, PaintEventArgs e)
        {

        }

    }
}
